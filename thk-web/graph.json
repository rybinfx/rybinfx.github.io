{"glsl": "#version 300 es\nprecision highp float;\nprecision highp int;\n\nlayout(location = 0) out vec4 fragPos;\nlayout(location = 1) out vec4 fragColor;\nin vec4 vUV;\n// varying vec4 vUV;\nuniform vec2 res;\nuniform float time;\nuniform int numPoints;\nuniform sampler2D u_tex0;\nuniform sampler2D u_tex1;\n// uniform int MODE;\n\nuniform vec2 tex0_res;\nuniform vec2 tex1_res;\nuniform vec2 tex2_res;\n\n\nuniform float u_off;\nuniform float u_resx;\nuniform float u_resy;\nuniform float u_val1;\nuniform float u_val2;\nuniform float u_mix1;\nuniform float u_mix2;\nuniform float u_move;\nuniform float u_tx;\nuniform float u_ty;\nuniform float u_val1a;\nuniform float u_val1b;\nuniform float u_val2a;\nuniform float u_val2b;\nuniform float u_val3a;\nuniform float u_val3b;\nuniform float u_val4a;\nuniform float u_val4b;\nuniform float u_chan18;\nuniform float u_chan19;\nuniform float u_chan20;\nuniform float u_chan21;\nuniform float u_reflect;\nuniform float u_weight_low;\nuniform float u_weight_high;\nuniform float u_diff_u;\nuniform float u_diff_v;\nuniform float u_seed;\nuniform float u_tex1w;\nuniform float u_tex1h;\nuniform float u_tex2w;\nuniform float u_tex2h;\nuniform float u_tex3w;\nuniform float u_tex3h;\nuniform float u_outw;\nuniform float u_outh;\n\n\n#define PI 3.1415926538\n\n\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\n\n\n\n\n\n\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\nfloat rand2(float x, float y){return fract(sin(dot(vec2(x,y), vec2(12.9898,78.233))) * 43758.5453123);}\n\n\n////////////////////////////////////////////////////////////////////////////////////\n// Random\n////////////////////////////////////////////////////////////////////////////////////\nfloat ns_rand1(float n){return fract(sin(n) * 43758.5453123);}\nfloat ns_rand2(float x, float y){return fract(sin(dot(vec2(x,y), vec2(12.9898,78.233))) * 43758.5453123);}\n////////////////////////////////////////////////////////////////////////////////////\n\n////////////////////////////////////////////////////////////////////////////////////\n// Value Noise\n////////////////////////////////////////////////////////////////////////////////////\nfloat ns_value1_rand(float n){return fract(sin(n) * 43758.5453123);}\nfloat ns_value1(float x) {\n  float fx = floor(x);\n  float u = fract(x);\n\treturn mix(ns_value1_rand(fx), ns_value1_rand(fx+1.0), u) * 2.0 - 1.0;\n}\n////////////////////////////////////////////////////////////////////////////////////\nfloat ns_value2_rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898,78.233))) * 43758.5453123);\n}\nfloat ns_value2(vec2 p){\n  float ipx = floor(p.x);\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\n  // u = smoothstep(0.0, 1.0, u);\n\n  float n00 = ns_value2_rand(floor(ip+vec2(0.0,0.0)));\n  float n01 = ns_value2_rand(floor(ip+vec2(0.0,1.0)));\n  float n10 = ns_value2_rand(floor(ip+vec2(1.0,0.0)));\n  float n11 = ns_value2_rand(floor(ip+vec2(1.0,1.0)));\n\n\tfloat res = mix(\n    mix(n00, n01, u.y),\n    mix(n10, n11, u.y),\n    u.x\n  );\n\n  // res = mix(ns_value2_rand(vec2(ipx, 0.0)), ns_value2_rand(vec2(floor(ipx+1.0), 0.0)), u.x);\n\n\treturn res * 2.0 - 1.0;\n}\n////////////////////////////////////////////////////////////////////////////////////\nfloat ns_value3_mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 ns_value3_mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 ns_value3_perm(vec4 x){return ns_value3_mod289(((x * 34.0) + 1.0) * x);}\nfloat ns_value3(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = ns_value3_perm(b.xyxy);\n    vec4 k2 = ns_value3_perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = ns_value3_perm(c);\n    vec4 k4 = ns_value3_perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return (o4.y * d.y + o4.x * (1.0 - d.y)) * 2.0 - 1.0;\n}\n////////////////////////////////////////////////////////////////////////////////////\n\n\n////////////////////////////////////////////////////////////////////////////////////\n//\tClassic Perlin 2D Noise \n//\tby Stefan Gustavson\n////////////////////////////////////////////////////////////////////////////////////\nvec4 ns_perlin2_permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec2 ns_perlin2_fade(vec2 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\nfloat ns_perlin2(vec2 P){\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n  vec4 i = ns_perlin2_permute(ns_perlin2_permute(ix) + iy);\n  vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\n  vec4 gy = abs(gx) - 0.5;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n  vec4 norm = 1.79284291400159 - 0.85373472095314 * \n    vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\n  g00 *= norm.x;\n  g01 *= norm.y;\n  g10 *= norm.z;\n  g11 *= norm.w;\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n  vec2 fade_xy = ns_perlin2_fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n////////////////////////////////////////////////////////////////////////////////////\n//\tClassic Perlin 3D Noise \n//\tby Stefan Gustavson\n////////////////////////////////////////////////////////////////////////////////////\nvec4 ns_perlin3_permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 ns_perlin3_taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 ns_perlin3_fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat ns_perlin3(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = ns_perlin3_permute(ns_perlin3_permute(ix) + iy);\n  vec4 ixy0 = ns_perlin3_permute(ixy + iz0);\n  vec4 ixy1 = ns_perlin3_permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = ns_perlin3_taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = ns_perlin3_taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = ns_perlin3_fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n////////////////////////////////////////////////////////////////////////////////////\n\n\n////////////////////////////////////////////////////////////////////////////////////\n// Simplex 2D noise\n////////////////////////////////////////////////////////////////////////////////////\nvec3 ns_simplex2_permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\nfloat ns_simplex2(vec2 v){\n  vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = ns_simplex2_permute( ns_simplex2_permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n////////////////////////////////////////////////////////////////////////////////////\n//\tSimplex 3D Noise \n//\tby Ian McEwan, Ashima Arts\n////////////////////////////////////////////////////////////////////////////////////\nvec4 ns_simplex3_permute(vec4 x){\n    vec4 y = ((x*34.0)+1.0)*x;\n    return y - (floor(y/289.0) * 289.0);\n  }\nvec4 ns_simplex3_taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nfloat ns_simplex3(vec3 v){\n  if (v.x == v.y) v.y += 0.00001;\n  if (v.y == v.z) v.z += 0.00001;\n  if (v.z == v.x) v.z += 0.00001;\n  vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz); // HERE SOMETHING HAPPENING g.x, g.z, i2.xz, i1.xy\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = ns_simplex3_permute( ns_simplex3_permute( ns_simplex3_permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = ns_simplex3_taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n////////////////////////////////////////////////////////////////////////////////////\n\n\n\n// ////////////////////////////////////////////////////////////////////////////////////\n// // Rdapp Distorion\n// ////////////////////////////////////////////////////////////////////////////////////\n// #define ns_rdapp_PI 3.1415926538\n// float ns_rdapp_rand(float n){return fract(sin(n) * 43758.5453123);}\n// vec3 ns_rdapp_rand_ch3(float n){return vec3(ns_rdapp_rand(n), ns_rdapp_rand(n+1.0/3.0), ns_rdapp_rand(n+2.0/3.0));}\n// vec3 ns_rdapp(vec3 p, float time, float amp, float freq, float astep, float fstep, int seed) {\n//   vec3 p0 = p;\n// \tp += amp*pow(astep, 0.0)*sin((pow(fstep, 0.0)*freq*p.yzx+normalize(ns_rdapp_rand_ch3(float(seed+0))-0.5)*ns_rdapp_PI*2.0*time+ns_rdapp_rand_ch3(seed+1))*ns_rdapp_PI*2.0);\n// \tp += amp*pow(astep, 1.0)*sin((pow(fstep, 1.0)*freq*p.yzx+normalize(ns_rdapp_rand_ch3(float(seed+2))-0.5)*ns_rdapp_PI*2.0*time+ns_rdapp_rand_ch3(seed+3))*ns_rdapp_PI*2.0);\n// \tp += amp*pow(astep, 2.0)*sin((pow(fstep, 2.0)*freq*p.yzx+normalize(ns_rdapp_rand_ch3(float(seed+4))-0.5)*ns_rdapp_PI*2.0*time+ns_rdapp_rand_ch3(seed+5))*ns_rdapp_PI*2.0);\n// \tp += amp*pow(astep, 4.0)*sin((pow(fstep, 3.0)*freq*p.yzx+normalize(ns_rdapp_rand_ch3(float(seed+6))-0.5)*ns_rdapp_PI*2.0*time+ns_rdapp_rand_ch3(seed+7))*ns_rdapp_PI*2.0);\n// \treturn p-p0;\n// }\n// ////////////////////////////////////////////////////////////////////////////////////\n\n\n\n\n\nfloat parabola( float x, float k )\n{\n    return pow( 4.0*x*(1.0-x), k );\n}\n\nfloat gain(float x, float k) \n{\n    float a = 0.5*pow(2.0*((x<0.5)?x:1.0-x), k);\n    return (x<0.5)?a:1.0-a;\n}\n\nfloat pcurve( float x, float a, float b )\n{\n    float k = pow(a+b,a+b)/(pow(a,a)*pow(b,b));\n    return k*pow(x,a)*pow(1.0-x,b);\n}\n\n\n\nvec2 rot2(vec2 v, float a) {\n\ta = a*PI*2.0;\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\nvec2 rot2(float a) {\n\treturn rot2(vec2(0.0, 1.0), a);\n}\nfloat n11(float x) { return x*2.0-1.0; }\nfloat n01(float x) { return x*0.5+0.5; }\n\nvec3 bezier(vec3 A, vec3 B, vec3 C, vec3 D, float t) {\n  vec3 E = mix(A, B, t);\n  vec3 F = mix(B, C, t);\n  vec3 G = mix(C, D, t);\n\n  vec3 H = mix(E, F, t);\n  vec3 I = mix(F, G, t);\n\n  vec3 P = mix(H, I, t);\n\n  return P;\n}\n\nfloat almostIdentity( float x, float m, float n )\n{\n    if( x>m ) return x;\n    float a = 2.0*n - m;\n    float b = 2.0*m - 3.0*n;\n    float t = x/m;\n    return (a*t + b)*t*t + n;\n}\n\nfloat integralSmoothstep( float x, float T )\n{\n    if( x>T ) return x - T/2.0;\n    return x*x*x*(1.0-x*0.5/T)/T/T;\n}\n\n// float rsplit(float x, int n) {\n// \tfloat sum = 0;\n// \tfloat rx = 0;\n// \tfor (int i = 0; i < n; i++) {\n// \t\tfloat t = time*0.5+i*0.2;\n// \t\tfloat npos = floor(t+i*10) + gain(fract(t), 4);\n// \t\tfloat r = pow(rnoise(npos), 1);\n// \t\trx += mix(0, r, clamp(x*n-float(i), 0.0, 1.0));\n// \t\tsum += r;\n// \t}\n// \trx /= sum;\n//   return rx;\n// }\n\n\n\n\n// float sinnoise(float x, int n, float seed) {\n//   float val = 0;\n//   float ampaccum = 0;\n//   for (int i = 0; i < n; i++) {\n//     float amp = rand(seed+i);\n//     float freq = rand(seed+i+100);\n//     // amp = 1;\n//     amp = gain(amp,4);\n//     freq += 0.1;\n//     ampaccum += amp;\n//     val += sin(x*freq*PI*2) * amp;\n//   }\n//   val /= ampaccum;\n//   return val;\n// }\n\n\n// float sinnoise(float x, float y, int n, float seed) {\n//   float val = 0;\n//   float ampaccum = 0;\n//   for (int i = 0; i < n; i++) {\n//     float amp = sinnoise(y, n, rand(seed+i+200))*0.5+0.5;\n//     // float amp = rand(time);\n//     float freq = rand(seed+i+300);\n//     // amp = 1/freq;\n//     amp = gain(amp,4);\n//     freq += 0.1;\n//     ampaccum += amp;\n//     val += sin(x*freq*PI*2) * amp;\n//   }\n//   val /= ampaccum;\n//   return val;\n// }\n\n\n// float sinnoise(float x, float y, float z, int n, float seed) {\n//   float val = 0;\n//   float ampaccum = 0;\n//   for (int i = 0; i < n; i++) {\n//     float amp = rand(seed+i);\n//     float freqX = (rand(seed+i+100)*2-1);\n//     float freqY = (rand(seed+i+200)*2-1);\n//     float freqZ = (rand(seed+i+300)*2-1);\n//     // amp = (freqX+freqY+freqZ);\n//     // amp = gain(amp,4);\n//     ampaccum += amp;\n//     // ampaccum += 0.3;\n//     float offset = rand(seed+i+400);\n//     val += sin(x*freqX*PI*2+y*freqY*PI*2+z*freqZ*PI*2+offset*2*PI) * amp;\n//   }\n//   val /= ampaccum;\n//   return val;\n// }\n\n// float sinnoise2(float x, float y, float z, int n, float seed) {\n//   float val = 0;\n//   float ampaccum = 0;\n//   for (int i = 0; i < n; i++) {\n//     float freq = 1.0;\n//     float amp = sinnoise(x*freq, y*freq, z*freq, 1, seed+50);\n//     float freqX = rand(seed+i+100)*2-1;\n//     float freqY = rand(seed+i+200)*2-1;\n//     float freqZ = rand(seed+i+300)*2-1;\n//     // amp = (freqX+freqY+freqZ);\n//     // amp = gain(amp,4);\n//     // ampaccum += amp;\n//     ampaccum += 1.0/3;\n//     float offset = rand(seed+i+400);\n//     val += sin(x*freqX*PI*2+y*freqY*PI*2+z*freqZ*PI*2+offset*2*PI) * amp;\n//   }\n//   val /= ampaccum;\n//   return val;\n// }\n\n\n\n\n\n\n\nstruct PData {\n\tvec3 p;\n\tfloat w;\n\tvec3 hsv;\n\tfloat a;\n\tvec4 extra_0;\n};\n\nstruct Seg {\n\tfloat idx;\n\tfloat size;\n\tfloat point;\n\tfloat npoints;\n};\n\nSeg seg_even(float point, float npoints, float size) {\n\tSeg new;\n\tnew.size = size;\n\tnew.npoints = float(int(npoints / size));\n\tnew.idx = float(int(point / new.npoints));\n\tnew.point = float(int(point-new.idx*new.npoints));\n\treturn new;\n}\n\n\nPData draw() {\n\tfloat point = float(int(vUV.t*res.y)*int(res.x)+int(vUV.s*res.x));\n\tfloat npoints = float(numPoints);\n\n\tvec3 pos;\n\tfloat alpha;\n\tfloat weight;\n\tfloat hue;\n\tfloat sat;\n\tfloat val;\n\tvec4 extra_0;\n\tvec4 extra_1;\n\tvec4 extra_2;\n\tvec4 extra_3;\n\n\n\t// Mesh Code\n\tSeg Clone_0 = seg_even(float(int(point)), float(int(npoints)), float(int(1)));\n\tSeg Clone_1 = seg_even(float(int(Clone_0.point)), float(int(Clone_0.npoints)), float(int(9)));\n\tSeg Clone_2 = seg_even(float(int(Clone_1.point)), float(int(Clone_1.npoints)), float(int(8)));\n\tSeg Clone_3 = seg_even(float(int(Clone_2.point)), float(int(Clone_2.npoints)), float(int(354)));\n\t\n\n\t// Main Code Defs\n\tvec3 node10 = vec3(0.0, 0.0, 0.0);\n\tfloat node29 = float(Clone_0.idx);\n\tfloat node33 = float(Clone_1.idx);\n\tfloat node24 = float(((((node29 * 9.0) - node29) - 4.0) + node33));\n\tfloat node21 = float((float(node24) / 9.0));\n\tfloat node57 = (float(((u_off * 0.1) * 0.1)) * Clone_3.size);\n\tfloat node53 = float((Clone_3.idx + fract(node57)));\n\tbool node48 = (Clone_3.size > 1.0);\n\tfloat node47_out0;\n\tif (node48) {\n\t\tnode47_out0 = (node53 / Clone_3.size);\n\t} else {\n\t\tnode47_out0 = fract((node53 + 0.5));\n\t}\n\tfloat node45 = floor(node47_out0);\n\tfloat node69 = fract(node47_out0);\n\tfloat node81 = (cos((u_off * 0.25)) * 4.0);\n\tfloat node80 = (node81 * 2.0);\n\tfloat node79 = (node69 - node80);\n\tbool node101 = (Clone_1.size > 1.0);\n\tfloat node100_out0;\n\tif (node101) {\n\t\tnode100_out0 = (node33 / (Clone_1.size - 1.0));\n\t} else {\n\t\tnode100_out0 = 0.5;\n\t}\n\tbool node89 = (u_reflect > 0.5);\n\tfloat node88_out0;\n\tif (node89) {\n\t\tnode88_out0 = (parabola((node24 / 32.0), 1.0) * 6.0);\n\t} else {\n\t\tnode88_out0 = parabola(node100_out0, 1.0);\n\t}\n\tfloat node86 = (node88_out0 * 4.0);\n\tfloat node107 = ((sin((u_off * 0.01)) * 4.0) * 2.0);\n\tvec2 node78 = vec2(node79, (node86 - node107));\n\tvec2 node122 = vec2(node79, ((node88_out0 - node80) + 0.12121));\n\tfloat node141 = (node69 * 8.0);\n\tfloat node140 = (node141 - node107);\n\tbool node148 = (Clone_2.size > 1.0);\n\tfloat node147_out0;\n\tif (node148) {\n\t\tnode147_out0 = (float(Clone_2.idx) / (Clone_2.size - 1.0));\n\t} else {\n\t\tnode147_out0 = 0.5;\n\t}\n\tfloat node145 = n11(node147_out0);\n\tfloat node144 = (node145 * n11(node100_out0));\n\tfloat node143 = (node144 * 0.33);\n\tvec3 node139 = vec3(node140, node88_out0, node143);\n\tfloat node167 = node139.x;\n\tfloat node168 = node139.y;\n\tfloat node169 = node139.z;\n\tvec3 node138 = (node139 + (vec3(((gain(((ns_simplex3((vec3(node167, node168, node169) / 1.5)) * 0.5) + 0.5), 3.0) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node167, node168, (node169 + 33.333333333333336)) / 1.5)) * 0.5) + 0.5), 3.0) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node167, node168, (node169 + 66.66666666666667)) / 1.5)) * 0.5) + 0.5), 3.0) * 2.0) - 1.0)) * 0.1));\n\tfloat node206 = ((node144 * 2.0) + 10.0);\n\tvec3 node205 = vec3(node140, node88_out0, node206);\n\tfloat node219 = node205.x;\n\tfloat node220 = node205.y;\n\tfloat node221 = node205.z;\n\tvec3 node204 = (node205 + (vec3(((gain(((ns_simplex3((vec3(node219, node220, node221) / 1.5)) * 0.5) + 0.5), 3.0) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node219, node220, (node221 + 33.333333333333336)) / 1.5)) * 0.5) + 0.5), 3.0) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node219, node220, (node221 + 66.66666666666667)) / 1.5)) * 0.5) + 0.5), 3.0) * 2.0) - 1.0)) * 0.1));\n\tfloat node65 = ((gain(pow(node69, pow(2.0, ((ns_simplex2((vec2(node78.x, node78.y) / 1.5)) * 4.0) * u_val3a))), pow(2.0, ((ns_simplex2((vec2(node122.x, node122.y) / 1.5)) * 4.0) * u_val3a))) + ((((gain(((ns_simplex3((vec3(node138.x, node138.y, node138.z) / 1.5)) * 0.5) + 0.5), 3.0) * 2.0) - 1.0) * 0.2) * u_val3a)) + ((((gain(((ns_simplex3((vec3(node204.x, node204.y, node204.z) / 1.5)) * 0.5) + 0.5), 3.0) * 2.0) - 1.0) * 0.0125) * u_val3a));\n\tfloat node44 = (node45 + node65);\n\tvec4 node17 = vec4((0.5 + (node21 * mix(0.2, 0.8, n01(cos((((node44 + 0.5) * 3.141592653589793) * 2.0)))))), node44, 0.0, 0.0);\n\tvec2 node15 = vec2(node17.x, node17.y);\n\tvec3 node12 = vec3(n11(node15.x), n11(node15.y), 0.0);\n\tfloat node268 = (node44 + 0.0009765625);\n\tvec4 node259 = vec4((0.5 + (node21 * mix(0.2, 0.8, n01(cos((((node268 + 0.5) * 3.141592653589793) * 2.0)))))), node268, 0.0, 0.0);\n\tvec2 node257 = vec2(node259.x, node259.y);\n\tvec3 node252 = normalize((vec3(n11(node257.x), n11(node257.y), 0.0) - node12));\n\tfloat node298 = (node144 * 0.2);\n\tfloat node299 = (node81 * 4.0);\n\tfloat node297 = (node298 + node299);\n\tvec3 node295 = vec3((node141 - node80), node88_out0, node297);\n\tfloat node310 = node295.x;\n\tfloat node311 = node295.y;\n\tfloat node312 = node295.z;\n\tfloat node313 = (u_val4a * 8.0);\n\tvec3 node294 = (node295 + (vec3(((gain(((ns_simplex3((vec3(node310, node311, node312) / 1.5)) * 0.5) + 0.5), node313) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node310, node311, (node312 + 33.333333333333336)) / 1.5)) * 0.5) + 0.5), node313) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node310, node311, (node312 + 66.66666666666667)) / 1.5)) * 0.5) + 0.5), node313) * 2.0) - 1.0)) * 0.1));\n\tfloat node336 = (1.0 + (u_val4b * 2.0));\n\tfloat node339 = ((clamp(parabola(node65, 1.0), 0.0, 1.0) * 0.75) + 0.25);\n\tfloat node374 = (u_ty * 2.0);\n\tfloat node373 = (node69 - node374);\n\tfloat node377 = (u_tx * 2.0);\n\tvec2 node372 = vec2(node373, (node86 - node377));\n\tvec2 node387 = vec2(node373, ((node88_out0 - node374) + 0.12121));\n\tfloat node404 = (node141 - node377);\n\tvec3 node403 = vec3(node404, node88_out0, node143);\n\tfloat node415 = node403.x;\n\tfloat node416 = node403.y;\n\tfloat node417 = node403.z;\n\tvec3 node402 = (node403 + (vec3(((gain(((ns_simplex3((vec3(node415, node416, node417) / 1.5)) * 0.5) + 0.5), 3.0) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node415, node416, (node417 + 33.333333333333336)) / 1.5)) * 0.5) + 0.5), 3.0) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node415, node416, (node417 + 66.66666666666667)) / 1.5)) * 0.5) + 0.5), 3.0) * 2.0) - 1.0)) * 0.1));\n\tvec3 node450 = vec3(node404, node88_out0, node206);\n\tfloat node461 = node450.x;\n\tfloat node462 = node450.y;\n\tfloat node463 = node450.z;\n\tvec3 node449 = (node450 + (vec3(((gain(((ns_simplex3((vec3(node461, node462, node463) / 1.5)) * 0.5) + 0.5), 3.0) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node461, node462, (node463 + 33.333333333333336)) / 1.5)) * 0.5) + 0.5), 3.0) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node461, node462, (node463 + 66.66666666666667)) / 1.5)) * 0.5) + 0.5), 3.0) * 2.0) - 1.0)) * 0.1));\n\tfloat node361 = ((gain(pow(node69, pow(2.0, ((ns_simplex2((vec2(node372.x, node372.y) / 1.5)) * 4.0) * u_val3a))), pow(2.0, ((ns_simplex2((vec2(node387.x, node387.y) / 1.5)) * 4.0) * u_val3a))) + ((((gain(((ns_simplex3((vec3(node402.x, node402.y, node402.z) / 1.5)) * 0.5) + 0.5), 3.0) * 2.0) - 1.0) * 0.2) * u_val3a)) + ((((gain(((ns_simplex3((vec3(node449.x, node449.y, node449.z) / 1.5)) * 0.5) + 0.5), 3.0) * 2.0) - 1.0) * 0.0125) * u_val3a));\n\tfloat node360 = (node45 + node361);\n\tvec4 node351 = vec4((0.5 + (node21 * mix(0.2, 0.8, n01(cos((((node360 + 0.5) * 3.141592653589793) * 2.0)))))), node360, 0.0, 0.0);\n\tvec2 node349 = vec2(node351.x, node351.y);\n\tvec3 node346 = vec3(n11(node349.x), n11(node349.y), 0.0);\n\tfloat node507 = (node360 + 0.0009765625);\n\tvec4 node498 = vec4((0.5 + (node21 * mix(0.2, 0.8, n01(cos((((node507 + 0.5) * 3.141592653589793) * 2.0)))))), node507, 0.0, 0.0);\n\tvec2 node496 = vec2(node498.x, node498.y);\n\tvec3 node491 = normalize((vec3(n11(node496.x), n11(node496.y), 0.0) - node346));\n\tfloat node534 = (u_ty * 4.0);\n\tfloat node533 = (node298 + node534);\n\tvec3 node531 = vec3((node141 - node374), node88_out0, node533);\n\tfloat node545 = node531.x;\n\tfloat node546 = node531.y;\n\tfloat node547 = node531.z;\n\tvec3 node530 = (node531 + (vec3(((gain(((ns_simplex3((vec3(node545, node546, node547) / 1.5)) * 0.5) + 0.5), node313) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node545, node546, (node547 + 33.333333333333336)) / 1.5)) * 0.5) + 0.5), node313) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node545, node546, (node547 + 66.66666666666667)) / 1.5)) * 0.5) + 0.5), node313) * 2.0) - 1.0)) * 0.1));\n\tfloat node568 = ((clamp(parabola(node361, 1.0), 0.0, 1.0) * 0.75) + 0.25);\n\tpos = (((((mix(((node10 + node12) + ((vec3(node252.y, (node252.x * -1.0), node252.z) * ((0.06 * clamp(gain(pow(((((gain(((ns_simplex3((vec3(node294.x, node294.y, node294.z) / 1.5)) * 0.5) + 0.5), node313) * 2.0) - 1.0) * 0.5) + 0.5), node336), 1.0), 0.0, 1.0)) * node339)) * node145)), ((node10 + node346) + ((vec3(node491.y, (node491.x * -1.0), node491.z) * ((0.06 * clamp(gain(pow(((((gain(((ns_simplex3((vec3(node530.x, node530.y, node530.z) / 1.5)) * 0.5) + 0.5), node313) * 2.0) - 1.0) * 0.5) + 0.5), node336), 1.0), 0.0, 1.0)) * node568)) * node145)), 1.0) * vec3((0.5625 / (u_resx / u_resy)), 1.0, 1.0)) * vec3(1.0, 1.0, 1.0)) * vec3(1.0, 1.0, 1.0)) * vec3(1.0, 0.8, 1.0)) + vec3(0.0, 0.06, 0.0));\n\talpha = mix(1.0, 1.0, 1.0);\n\tfloat node594 = mix(0.5, 1.0, 1.0);\n\tfloat node593 = clamp(node594, 0.0, 1.0);\n\tfloat node612 = ((node144 * 4.0) + 10.0);\n\tvec3 node611 = vec3(node299, node88_out0, node612);\n\tfloat node624 = node611.x;\n\tfloat node625 = node611.y;\n\tfloat node626 = node611.z;\n\tvec3 node610 = (node611 + (vec3(((gain(((ns_simplex3((vec3(node624, node625, node626) / 1.5)) * 0.5) + 0.5), 1.0) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node624, node625, (node626 + 33.333333333333336)) / 1.5)) * 0.5) + 0.5), 1.0) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node624, node625, (node626 + 66.66666666666667)) / 1.5)) * 0.5) + 0.5), 1.0) * 2.0) - 1.0)) * 0.1));\n\tfloat node647 = pow(2.0, (n11(pow(u_val2b, 1.3)) * -4.0));\n\tfloat node654 = (pow(u_val2a, 4.0) * 8.0);\n\tbool node661 = (mod(float((Clone_3.idx - floor(node57))), 32.0) == 0.0);\n\tfloat node660_out0;\n\tif (node661) {\n\t\tnode660_out0 = 1.0;\n\t} else {\n\t\tnode660_out0 = 0.0;\n\t}\n\tfloat node658 = mix(1.0, 2.0, node660_out0);\n\tvec3 node688 = vec3(node534, node88_out0, node612);\n\tfloat node699 = node688.x;\n\tfloat node700 = node688.y;\n\tfloat node701 = node688.z;\n\tvec3 node687 = (node688 + (vec3(((gain(((ns_simplex3((vec3(node699, node700, node701) / 1.5)) * 0.5) + 0.5), 1.0) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node699, node700, (node701 + 33.333333333333336)) / 1.5)) * 0.5) + 0.5), 1.0) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node699, node700, (node701 + 66.66666666666667)) / 1.5)) * 0.5) + 0.5), 1.0) * 2.0) - 1.0)) * 0.1));\n\tweight = mix(mix(1.5, 3.0, (((node593 * (gain(pow(pow(((((gain(((ns_simplex3((vec3(node610.x, node610.y, node610.z) / 1.5)) * 0.5) + 0.5), 1.0) * 2.0) - 1.0) * 0.5) + 0.5), 1.0), node647), node654) * 5.0)) * node658) * node339)), mix(1.5, 3.0, (((node593 * (gain(pow(pow(((((gain(((ns_simplex3((vec3(node687.x, node687.y, node687.z) / 1.5)) * 0.5) + 0.5), 1.0) * 2.0) - 1.0) * 0.5) + 0.5), 1.0), node647), node654) * 5.0)) * node658) * node568)), 1.0);\n\tvec3 node742 = vec3(node140, node88_out0, node297);\n\tfloat node753 = node742.x;\n\tfloat node754 = node742.y;\n\tfloat node755 = node742.z;\n\tfloat node756 = (1.0 + (u_val1a * 2.0));\n\tvec3 node741 = (node742 + (vec3(((gain(((ns_simplex3((vec3(node753, node754, node755) / 1.5)) * 0.5) + 0.5), node756) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node753, node754, (node755 + 33.333333333333336)) / 1.5)) * 0.5) + 0.5), node756) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node753, node754, (node755 + 66.66666666666667)) / 1.5)) * 0.5) + 0.5), node756) * 2.0) - 1.0)) * 0.1));\n\tfloat node779 = (1.0 - u_val1a);\n\tfloat node797 = (node69 * 2.0);\n\tfloat node798 = (node144 * 3.0);\n\tvec3 node795 = vec3((node797 - node81), node798, 0.0);\n\tfloat node809 = node795.x;\n\tfloat node810 = node795.y;\n\tfloat node811 = node795.z;\n\tvec3 node794 = (node795 + (vec3(((gain(((ns_simplex3((vec3(node809, node810, node811) / 1.5)) * 0.5) + 0.5), 2.0) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node809, node810, (node811 + 33.333333333333336)) / 1.5)) * 0.5) + 0.5), 2.0) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node809, node810, (node811 + 66.66666666666667)) / 1.5)) * 0.5) + 0.5), 2.0) * 2.0) - 1.0)) * 0.1));\n\tfloat node832 = parabola(u_val1a, 1.0);\n\tfloat node833 = (0.5 * node660_out0);\n\tvec3 node850 = vec3(node404, node88_out0, node533);\n\tfloat node861 = node850.x;\n\tfloat node862 = node850.y;\n\tfloat node863 = node850.z;\n\tvec3 node849 = (node850 + (vec3(((gain(((ns_simplex3((vec3(node861, node862, node863) / 1.5)) * 0.5) + 0.5), node756) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node861, node862, (node863 + 33.333333333333336)) / 1.5)) * 0.5) + 0.5), node756) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node861, node862, (node863 + 66.66666666666667)) / 1.5)) * 0.5) + 0.5), node756) * 2.0) - 1.0)) * 0.1));\n\tvec3 node899 = vec3((node797 - u_ty), node798, 0.0);\n\tfloat node911 = node899.x;\n\tfloat node912 = node899.y;\n\tfloat node913 = node899.z;\n\tvec3 node898 = (node899 + (vec3(((gain(((ns_simplex3((vec3(node911, node912, node913) / 1.5)) * 0.5) + 0.5), 2.0) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node911, node912, (node913 + 33.333333333333336)) / 1.5)) * 0.5) + 0.5), 2.0) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node911, node912, (node913 + 66.66666666666667)) / 1.5)) * 0.5) + 0.5), 2.0) * 2.0) - 1.0)) * 0.1));\n\thue = mix(fract((((u_val1b + ((((gain(((ns_simplex3((vec3(node741.x, node741.y, node741.z) / 1.5)) * 0.5) + 0.5), node756) * 2.0) - 1.0) * node779) * 0.5)) + (((((((gain(((ns_simplex3((vec3(node794.x, node794.y, node794.z) / 1.5)) * 0.5) + 0.5), 2.0) * 2.0) - 1.0) * 0.5) + 0.5) * -1.0) * u_val1a) * node832)) + node833)), fract((((u_val1b + ((((gain(((ns_simplex3((vec3(node849.x, node849.y, node849.z) / 1.5)) * 0.5) + 0.5), node756) * 2.0) - 1.0) * node779) * 0.5)) + (((((((gain(((ns_simplex3((vec3(node898.x, node898.y, node898.z) / 1.5)) * 0.5) + 0.5), 2.0) * 2.0) - 1.0) * 0.5) + 0.5) * -1.0) * u_val1a) * node832)) + node833)), 1.0);\n\tfloat node955 = (node69 * 4.0);\n\tfloat node956 = (node144 + 20.0);\n\tvec3 node953 = vec3((node955 - node299), node88_out0, node956);\n\tfloat node968 = node953.x;\n\tfloat node969 = node953.y;\n\tfloat node970 = node953.z;\n\tvec3 node952 = (node953 + (vec3(((gain(((ns_simplex3((vec3(node968, node969, node970) / 1.5)) * 0.5) + 0.5), 1.5) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node968, node969, (node970 + 33.333333333333336)) / 1.5)) * 0.5) + 0.5), 1.5) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node968, node969, (node970 + 66.66666666666667)) / 1.5)) * 0.5) + 0.5), 1.5) * 2.0) - 1.0)) * 0.1));\n\tfloat node992 = mix(0.5, 1.0, pow(u_val1a, 0.25));\n\tfloat node994 = (1.0 - (node660_out0 * 0.3));\n\tvec3 node1013 = vec3((node955 - node534), node88_out0, node956);\n\tfloat node1025 = node1013.x;\n\tfloat node1026 = node1013.y;\n\tfloat node1027 = node1013.z;\n\tvec3 node1012 = (node1013 + (vec3(((gain(((ns_simplex3((vec3(node1025, node1026, node1027) / 1.5)) * 0.5) + 0.5), 1.5) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node1025, node1026, (node1027 + 33.333333333333336)) / 1.5)) * 0.5) + 0.5), 1.5) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node1025, node1026, (node1027 + 66.66666666666667)) / 1.5)) * 0.5) + 0.5), 1.5) * 2.0) - 1.0)) * 0.1));\n\tsat = mix(pow(pow((pow(((((gain(((ns_simplex3((vec3(node952.x, node952.y, node952.z) / 1.5)) * 0.5) + 0.5), 1.5) * 2.0) - 1.0) * 0.5) + 0.5), 1.2) * node992), 1.5), node994), pow(pow((pow(((((gain(((ns_simplex3((vec3(node1012.x, node1012.y, node1012.z) / 1.5)) * 0.5) + 0.5), 1.5) * 2.0) - 1.0) * 0.5) + 0.5), 1.2) * node992), 1.5), node994), 1.0);\n\tvec3 node1070 = vec3((node141 - node299), node88_out0, node206);\n\tfloat node1082 = node1070.x;\n\tfloat node1083 = node1070.y;\n\tfloat node1084 = node1070.z;\n\tvec3 node1069 = (node1070 + (vec3(((gain(((ns_simplex3((vec3(node1082, node1083, node1084) / 1.5)) * 0.5) + 0.5), 1.0) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node1082, node1083, (node1084 + 33.333333333333336)) / 1.5)) * 0.5) + 0.5), 1.0) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node1082, node1083, (node1084 + 66.66666666666667)) / 1.5)) * 0.5) + 0.5), 1.0) * 2.0) - 1.0)) * 0.1));\n\tfloat node1105 = (1.0 + u_val2a);\n\tvec3 node1124 = vec3((node141 - node534), node88_out0, node206);\n\tfloat node1136 = node1124.x;\n\tfloat node1137 = node1124.y;\n\tfloat node1138 = node1124.z;\n\tvec3 node1123 = (node1124 + (vec3(((gain(((ns_simplex3((vec3(node1136, node1137, node1138) / 1.5)) * 0.5) + 0.5), 1.0) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node1136, node1137, (node1138 + 33.333333333333336)) / 1.5)) * 0.5) + 0.5), 1.0) * 2.0) - 1.0), ((gain(((ns_simplex3((vec3(node1136, node1137, (node1138 + 66.66666666666667)) / 1.5)) * 0.5) + 0.5), 1.0) * 2.0) - 1.0)) * 0.1));\n\tval = mix(((clamp(parabola(node65, 0.9), 0.0, 1.0) * (pow(((((gain(((ns_simplex3((vec3(node1069.x, node1069.y, node1069.z) / 1.5)) * 0.5) + 0.5), 1.0) * 2.0) - 1.0) * 0.5) + 0.5), node1105) * 2.0)) * node594), ((clamp(parabola(node361, 0.9), 0.0, 1.0) * (pow(((((gain(((ns_simplex3((vec3(node1123.x, node1123.y, node1123.z) / 1.5)) * 0.5) + 0.5), 1.0) * 2.0) - 1.0) * 0.5) + 0.5), node1105) * 2.0)) * node594), 1.0);\n\t\n\n\n\tPData result;\n\tresult.p = pos;\n\tresult.w = weight;\n\tresult.hsv = vec3(hue, sat, val);\n\tresult.a = alpha;\n\tresult.extra_0 = extra_0;\n\treturn result;\n}\t\n\n\n\n\n\nvoid main()\n{\n\tPData pdata = draw();\n\n\tvec3 color = hsv2rgb(pdata.hsv);\n\tvec4 posw = vec4(pdata.p, pdata.w);\n\tvec4 colora = vec4(color, pdata.a);\n\n\tfragPos = posw;\n\tfragColor = colora;\n\n\t// if (mode == 0) gl_FragColor = posw;\n\t// if (mode == 1) gl_FragColor = colora;\n\t// if (MODE == 0) result = posw;\n\t// if (MODE == 1) result = colora;\n\t// if (MODE == 2) result = pdata.extra_0;\n\t// fragColor = result;\n}", "points": 25488, "primitives": []}