{
  "version": 3,
  "sources": ["../../media-codecs/src/vp.js", "../../media-codecs/src/av.js", "../../media-codecs/src/avc.js", "../../media-codecs/src/hevc.js"],
  "sourcesContent": ["/** @module vp */\n\n/**\n * List of codecs\n * @constant\n * @type {import(\"../types.js\").CodecItem[]}\n */\nconst VP_CODECS = [\n  { name: \"VP8\", cccc: \"vp08\" },\n  { name: \"VP9\", cccc: \"vp09\" },\n  // { name: \"VP10\", cccc: \"vp10\" },\n];\n\n/**\n * List of VP profiles numbers\n * @constant {number[]}\n */\nconst VP_PROFILES = [0, 1, 2, 3];\n\n/**\n * VP Levels\n * @constant\n * @type {string[]}\n * @see [webmproject.org]{@link https://www.webmproject.org/vp9/mp4/}\n */\n// prettier-ignore\nconst VP_LEVELS = [\n  \"1\", \"1.1\",\n  \"2\", \"2.1\",\n  \"3\", \"3.1\",\n  \"4\", \"4.1\",\n  \"5\", \"5.1\", \"5.2\",\n  \"6\", \"6.1\", \"6.2\"\n];\n\n/**\n * List of supported bit depth\n * @constant\n * @type {number[]}\n */\nconst VP_BIT_DEPTH = [8, 10, 12];\n\n/** @private  */\nconst formatProfile = (profile) => String(profile).padStart(2, \"0\");\n\n/** @private  */\nconst formatLevel = (level) => String(parseFloat(level) * 10).padStart(2, \"0\");\n\n/** @private  */\nconst formatBitDepth = (bitDepth) => String(bitDepth).padStart(2, \"0\");\n\n/** @private  */\nconst formatCodec = (cccc, PP, LL, DD) => `${cccc}.${PP}.${LL}.${DD}`;\n\n/**\n * Return a list of all possible codec parameter string and their human readable names\n * @returns {import(\"../types.js\").MediaCodecItem[]}\n */\nconst getAllItems = () =>\n  VP_CODECS.map((codec) =>\n    VP_PROFILES.map((profile) =>\n      VP_LEVELS.map((level) =>\n        VP_BIT_DEPTH.map((bitDepth) => ({\n          name: `${codec.name} Profile ${profile} Level ${level} BitDepth ${bitDepth}`,\n          codec: formatCodec(\n            codec.cccc,\n            formatProfile(profile),\n            formatLevel(level),\n            formatBitDepth(bitDepth),\n          ),\n        })),\n      ),\n    ),\n  ).flat(4);\n\n/**\n * Get a codec parameter string\n * @param {import(\"../types.js\").VPCodecOptions} options\n * @returns {string}\n */\nconst getCodec = ({ name, profile, level, bitDepth }) => {\n  const codec = VP_CODECS.find((codec) => codec.name === name);\n  if (!codec) throw new Error(`Unknown VP Codec \"${name}\"`);\n\n  if (!VP_PROFILES.includes(profile)) {\n    throw new Error(`Unknown VP Profile \"${profile}\"`);\n  }\n  if (!VP_LEVELS.includes(level)) {\n    throw new Error(`Unknown VP Level \"${level}\"`);\n  }\n  if (!VP_BIT_DEPTH.includes(bitDepth)) {\n    throw new Error(`Unknown VP BitDepth \"${bitDepth}\"`);\n  }\n\n  return formatCodec(\n    codec.cccc,\n    formatProfile(profile),\n    formatLevel(level),\n    formatBitDepth(bitDepth),\n  );\n};\n\n/**\n * Get a codec human readbable name\n * @param {string} codec a codec string (avc1[.PPCCLL] eg. \"avc1.640028\")\n * @returns {string}\n */\nconst getCodecName = (codec) =>\n  getAllItems().find((item) => item.codec === codec)?.name;\n\nexport {\n  VP_CODECS,\n  VP_PROFILES,\n  VP_LEVELS,\n  VP_BIT_DEPTH,\n  formatCodec,\n  formatLevel,\n  getAllItems,\n  getCodec,\n  getCodecName,\n};\n", "/** @module av */\n\n/**\n * List of codecs\n * @constant\n * @type {import(\"../types.js\").CodecItem[]}\n */\nconst AV_CODECS = [\n  { name: \"AV1\", cccc: \"av01\" },\n  // { name: \"AV2\", cccc: \"av02\" },\n];\n\n/**\n * List of AV profiles numbers\n * @constant\n * @type {import(\"../types.js\").AVProfileItem[]}\n * @see [av1-spec]{@link https://aomediacodec.github.io/av1-spec/#profiles}\n */\nconst AV_PROFILES = [\n  { name: \"Main\", P: \"0\" },\n  { name: \"High\", P: \"1\" },\n  { name: \"Professional\", P: \"2\" },\n];\n\n/**\n * AV Levels\n * @constant\n * @type {string[]}\n * @see [av1-spec]{@link https://aomediacodec.github.io/av1-spec/#levels}\n */\n// prettier-ignore\nconst AV_LEVELS = [\n  \"2.0\", \"2.1\", \"2.2\", \"2.3\",\n  \"3.0\", \"3.1\", \"3.2\", \"3.3\",\n  \"4.0\", \"4.1\", \"4.2\", \"4.3\",\n  \"5.0\", \"5.1\", \"5.2\", \"5.3\",\n  \"6.0\", \"6.1\", \"6.2\", \"6.3\",\n  \"7.0\", \"7.1\", \"7.2\", \"7.3\"\n];\n\n/**\n * List of supported tier\n * @constant\n * @type {string[]}\n */\nconst AV_TIER = [\"Main\", \"High\"];\n\n/**\n * List of supported bit depth\n * @constant\n * @type {number[]}\n */\nconst AV_BIT_DEPTH = [8, 10, 12];\n\n/** @private  */\nconst formatProfile = ({ P }) => P;\n\n/** @private  */\nconst convertLevel = (level) => {\n  const [X, Y] = level.split(\".\");\n  return (parseInt(X, 10) - 2) * 4 + parseInt(Y, 10);\n};\n\n/** @private  */\nconst formatLevel = (level) => String(convertLevel(level)).padStart(2, \"0\");\n\n/** @private  */\nconst formatTier = (tier) => tier.at(0);\n\n/** @private  */\nconst formatBitDepth = (bitDepth) => String(bitDepth).padStart(2, \"0\");\n\n/** @private  */\nconst formatCodec = (cccc, P, LL, T, DD) => `${cccc}.${P}.${LL}${T}.${DD}`;\n\n/**\n * Return a list of all possible codec parameter string and their human readable names\n * @returns {import(\"../types.js\").MediaCodecItem[]}\n */\nconst getAllItems = () =>\n  AV_CODECS.map((codec) =>\n    AV_PROFILES.map((profile) =>\n      AV_LEVELS.map((level) =>\n        AV_TIER.map((tier) => {\n          // The High tier is only available for level 4.0 and up.\n          if (tier === \"High\" && convertLevel(level) < 8) return;\n\n          return AV_BIT_DEPTH.map((bitDepth) => {\n            // 12 bitDepth is only available for the\t\"Professional\" profile\n            if (profile.P !== \"2\" && bitDepth === 12) return;\n\n            return {\n              name: `${codec.name} ${profile.name} Profile Level ${level} Tier ${tier} BitDepth ${bitDepth}`,\n              codec: formatCodec(\n                codec.cccc,\n                formatProfile(profile),\n                formatLevel(level),\n                formatTier(tier),\n                formatBitDepth(bitDepth),\n              ),\n            };\n          });\n        }),\n      ),\n    ),\n  )\n    .flat(4)\n    .filter(Boolean);\n\n/**\n * Get a codec parameter string\n * @param {import(\"../types.js\").AVCodecOptions} options\n * @returns {string}\n */\nconst getCodec = ({ name, profile: profileName, level, tier, bitDepth }) => {\n  const codec = AV_CODECS.find((codec) => codec.name === name);\n  if (!codec) throw new Error(`Unknown AV Codec \"${name}\"`);\n\n  const profile = AV_PROFILES.find((profile) => profile.name === profileName);\n  if (!AV_PROFILES) {\n    throw new Error(`Unknown AV Profile \"${profileName}\"`);\n  }\n  if (!AV_LEVELS.includes(level)) {\n    throw new Error(`Unknown AV Level \"${level}\"`);\n  }\n  if (!AV_TIER.includes(tier)) {\n    throw new Error(`Unknown AV Tier \"${tier}\"`);\n  }\n  if (!AV_BIT_DEPTH.includes(bitDepth)) {\n    throw new Error(`Unknown AV BitDepth \"${bitDepth}\"`);\n  }\n\n  return formatCodec(\n    codec.cccc,\n    formatProfile(profile),\n    formatLevel(level),\n    formatTier(tier),\n    formatBitDepth(bitDepth),\n  );\n};\n\n/**\n * Get a codec human readbable name\n * @param {string} codec a codec string (av01.P.LLT.DD eg. \"av01.P.LLT.DD\")\n * @returns {string}\n */\nconst getCodecName = (codec) =>\n  getAllItems().find((item) => item.codec === codec)?.name;\n\nexport {\n  AV_CODECS,\n  AV_PROFILES,\n  AV_LEVELS,\n  AV_TIER,\n  AV_BIT_DEPTH,\n  formatCodec,\n  formatLevel,\n  getAllItems,\n  getCodec,\n  getCodecName,\n};\n", "/** @module avc */\n\n/**\n * List of profiles with their profile numbers (PP) and the constraints component (CC).\n * @constant\n * @type {import(\"../types.js\").VCProfileItem[]}\n */\nconst AVC_PROFILES = [\n  { name: \"Constrained Baseline\", PP: \"42\", CC: \"40\" },\n  { name: \"Baseline\", PP: \"42\", CC: \"00\" },\n  { name: \"Extended\", PP: \"58\", CC: \"00\" },\n  { name: \"Main\", PP: \"4d\", CC: \"00\" },\n\n  { name: \"High\", PP: \"64\", CC: \"00\" },\n  { name: \"Progressive High\", PP: \"64\", CC: \"08\" },\n  { name: \"Constrained High\", PP: \"64\", CC: \"0c\" },\n  { name: \"High 10\", PP: \"6e\", CC: \"00\" },\n  { name: \"High 4:2:2\", PP: \"7a\", CC: \"00\" },\n  { name: \"High 4:4:4 Predictive\", PP: \"f4\", CC: \"00\" },\n  { name: \"High 10 Intra\", PP: \"6e\", CC: \"10\" },\n  { name: \"High 4:2:2 Intra\", PP: \"7a\", CC: \"10\" },\n  { name: \"High 4:4:4 Intra\", PP: \"f4\", CC: \"10\" },\n  { name: \"CAVLC 4:4:4 Intra\", PP: \"44\", CC: \"00\" },\n\n  { name: \"Scalable Baseline\", PP: \"53\", CC: \"00\" },\n  { name: \"Scalable Constrained Baseline\", PP: \"53\", CC: \"04\" },\n  { name: \"Scalable High\", PP: \"56\", CC: \"00\" },\n  { name: \"Scalable Constrained High\", PP: \"56\", CC: \"04\" },\n  { name: \"Scalable High Intra\", PP: \"56\", CC: \"20\" },\n\n  { name: \"Stereo High\", PP: \"80\", CC: \"00\" },\n  { name: \"Multiview High\", PP: \"76\", CC: \"00\" },\n  { name: \"Multiview Depth High\", PP: \"8a\", CC: \"00\" },\n];\nconst cccc = \"avc1\";\n\n/**\n * AVC Levels\n * @constant\n * @type {number[]}\n * @see [wikipedia.org]{@link https://en.wikipedia.org/wiki/Advanced_Video_Coding#Levels}\n */\n// prettier-ignore\nconst AVC_LEVELS = [\n  \"1\", \"1.1\", \"1.2\", \"1.3\",\n  \"2\", \"2.1\", \"2.2\",\n  \"3\", \"3.1\", \"3.2\",\n  \"4\", \"4.1\", \"4.2\",\n  \"5\", \"5.1\", \"5.2\",\n  \"6\", \"6.1\", \"6.2\"\n];\n\n/** @private */\nconst formatLevel = (level) =>\n  (parseFloat(level) * 10).toString(16).padStart(2, \"0\");\n\n/** @private */\nconst formatCodec = (cccc, { PP, CC }, LL) => `${cccc}.${PP}${CC}${LL}`;\n\n/**\n * Return a list of all possible codec parameter string and their human readable names\n * @returns {import(\"../types.js\").MediaCodecItem[]}\n */\nconst getAllItems = () =>\n  AVC_PROFILES.map((profile) =>\n    AVC_LEVELS.map((level) => ({\n      name: `AVC ${profile.name} Profile Level ${level}`,\n      codec: formatCodec(cccc, profile, formatLevel(level)),\n    })),\n  ).flat();\n\n/**\n * Get a codec parameter string\n * @param {import(\"../types.js\").AVCCodecOptions} options\n * @returns {string}\n */\nconst getCodec = ({ profile: profileName, level }) => {\n  if (!AVC_LEVELS.includes(level))\n    throw new Error(`Unknown AVC Level \"${level}\"`);\n\n  const profile = AVC_PROFILES.find((profile) => profile.name === profileName);\n  if (!profile) throw new Error(`Unknown AVC Profile \"${profileName}\"`);\n\n  return formatCodec(cccc, profile, formatLevel(level));\n};\n\n/**\n * Get a codec human readbable name\n * @param {string} codec a codec string (cccc.PP.LL.DD eg. \"vp09.00.10.08\")\n * @returns {string}\n */\nconst getCodecName = (codec) =>\n  getAllItems().find((item) => item.codec === codec)?.name;\n\nexport {\n  AVC_PROFILES,\n  AVC_LEVELS,\n  formatCodec,\n  formatLevel,\n  getAllItems,\n  getCodec,\n  getCodecName,\n};\n", "/** @module hevc */\n\n/**\n * List of profiles with their profile numbers (PP) and the compatibility (C).\n *\n * See Annexe 3 Profiles\n * @constant\n * @type {import(\"../types.js\").VCProfileItem[]}\n */\nconst HEVC_PROFILES = [\n  { name: \"Main\", PP: \"1\" },\n  { name: \"Main 10\", PP: \"2\" },\n  { name: \"Main Still Picture\", PP: \"3\" },\n\n  // Version 2\n  { name: \"Range Extensions\", PP: \"4\" },\n\n  { name: \"High Throughput\", PP: \"5\" },\n  { name: \"Multiview Main\", PP: \"6\" },\n  { name: \"Scalable Main\", PP: \"7\" },\n\n  // Version 3\n  { name: \"3D Main\", PP: \"8\" },\n  { name: \"Screen Extended\", PP: \"9\" },\n  { name: \"Scalable Range Extensions\", PP: \"10\" },\n  { name: \"High Throughput Screen Extended\", PP: \"11\" },\n];\nconst cccc = \"hev1\"; // TODO: is \"hvc1\" necessary\n\n/**\n * HEVC Profile Compatibility as a number in the 0..32 range\n * TODO: is that correct\n * @constant\n * @type {number[]}\n */\nconst HEVC_PROFILE_COMPATIBILITY = Array.from({ length: 32 }, (_, i) => i);\n\n/**\n * HEVC Levels\n * @constant\n * @type {string[]}\n * @see [hevc-levels]{@link https://en.wikipedia.org/wiki/High_Efficiency_Video_Coding#Tiers_and_levels}\n */\n// prettier-ignore\nconst HEVC_LEVELS = [\n  \"1\",\n  \"2\", \"2.1\",\n  \"3\", \"3.1\",\n  \"4\", \"4.1\",\n  \"5\", \"5.1\", \"5.2\",\n  \"6\", \"6.1\", \"6.2\"\n];\n\n/**\n * List of supported tier\n * @constant\n * @type {string[]}\n */\nconst HEVC_TIER = [\"Main\", \"High\"];\n\n// /**\n//  * List of supported bit depth\n//  * @constant {number[]}\n//  */\n// const HEVC_BIT_DEPTH = [8, 10, 12, 14, 16];\n\n/** @private  */\nconst convertLevel = (level) => parseFloat(level) * 10 * 3;\n\n/** @private  */\nconst formatLevel = (level) => String(convertLevel(level));\n\n/** @private  */\nconst formatCompatibility = (compatibility) => compatibility.toString(16);\n\n/** @private  */\nconst formatTier = (tier) => (tier === \"Main\" ? \"L\" : \"H\");\n\n/** @private  */\nconst formatCodec = (cccc, { PP }, C, T, LL, CC) =>\n  `${cccc}.${PP}.${C}.${T}${LL}.${CC}`;\n\n/**\n * Return a list of all possible codec parameter string and their human readable names\n * @returns {import(\"../types.js\").MediaCodecItem[]}\n */\nconst getAllItems = () =>\n  HEVC_PROFILES.map((profile) =>\n    HEVC_PROFILE_COMPATIBILITY.map((compatibility) =>\n      HEVC_LEVELS.map((level) =>\n        HEVC_TIER.map((tier) => {\n          // The High tier is only available for level 4.0 and up.\n          if (tier === \"High\" && convertLevel(level) < 120) return;\n\n          return {\n            name: `HEVC ${profile.name} Profile Compability ${compatibility} Level ${level} Tier ${tier}`,\n            codec: formatCodec(\n              cccc,\n              profile,\n              formatCompatibility(compatibility),\n              formatTier(tier),\n              formatLevel(level),\n              \"b0\", // TODO\n            ),\n          };\n        }),\n      ),\n    ),\n  )\n    .flat(3)\n    .filter(Boolean);\n\n/**\n * Get a codec parameter string\n * @param {import(\"../types.js\").HEVCCodecOptions} options\n * @returns {string}\n */\nconst getCodec = ({\n  profile: profileName,\n  compatibility,\n  level,\n  tier,\n  constraint = \"b0\",\n}) => {\n  const profile = HEVC_PROFILES.find((profile) => profile.name === profileName);\n  if (!profile) throw new Error(`Unknown HEVC profile \"${profileName}\"`);\n\n  if (!HEVC_LEVELS.includes(level)) {\n    throw new Error(`Unknown HEVC Level \"${level}\"`);\n  }\n  if (!HEVC_TIER.includes(tier)) {\n    throw new Error(`Unknown HEVC Tier \"${tier}\"`);\n  }\n\n  return formatCodec(\n    cccc,\n    profile,\n    formatCompatibility(compatibility),\n    formatLevel(level),\n    formatTier(tier),\n    constraint,\n  );\n};\n\n/**\n * Get a codec human readbable name\n * @param {string} codec a codec string (cccc.PP.C.TLL.CC eg. \"hev1.1.3.H34.B0\")\n * @returns {string}\n */\nconst getCodecName = (codec) =>\n  getAllItems().find((item) => item.codec === codec)?.name;\n\nexport {\n  HEVC_PROFILES,\n  HEVC_PROFILE_COMPATIBILITY,\n  HEVC_LEVELS,\n  HEVC_TIER,\n  formatCodec,\n  formatLevel,\n  getAllItems,\n  getCodec,\n  getCodecName,\n};\n"],
  "mappings": "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",
  "names": ["cccc", "codec", "formatCodec", "formatLevel", "getAllItems", "getCodec", "getCodecName", "formatProfile", "formatBitDepth", "cccc", "codec", "profile", "formatCodec", "formatLevel", "getAllItems", "getCodec", "getCodecName", "cccc", "profile", "formatCodec", "formatLevel", "getAllItems", "getCodec", "getCodecName", "cccc", "convertLevel", "formatTier", "profile"]
}
