export default Encoder;
export type EncoderExtensions = "mp4" | "webm" | "png" | "jpg" | "gif" | "mkv";
export type EncoderTarget = "in-browser" | "file-system";
/**
 * @typedef {"mp4" | "webm" | "png" | "jpg" | "gif" | "mkv"} EncoderExtensions
 */
/**
 * @typedef {"in-browser" | "file-system"} EncoderTarget
 */
declare class Encoder {
    /**
     * The extension the encoder supports
     * @type {Extensions[]}
     */
    static supportedExtensions: Extensions[];
    /**
     * The target to download the file to.
     * @type {EncoderTarget[]}
     */
    static supportedTargets: EncoderTarget[];
    static defaultOptions: {
        frameMethod: string;
        extension: Extensions;
        target: EncoderTarget;
    };
    /**
     * Base Encoder class. All Encoders extend it and its method are called by the Recorder.
     * @class Encoder
     * @param {object} options
     *
     * @property {EncoderTarget} target
     * @property {EncoderExtensions} extension
     * @property {object} [encoderOptions]
     * @property {object} [muxerOptions]
     */
    constructor(options: object);
    /**
     * Setup the encoder: load binary, instantiate muxers, setup file system target...
     * @param {object} options
     */
    init(options: object): Promise<void>;
    getDirectory(): Promise<FileSystemDirectoryHandle>;
    getDirectoryHandle(directory: any, name: any): Promise<any>;
    getFileHandle(name: any, options: any): Promise<any>;
    getWritableFileStream(fileHandle: any): Promise<any>;
    /**
     * Encode a single frame. The frameNumber is usually used for GOP (Group Of Pictures).
     * @param {number} frame
     * @param {number} [frameNumber]
     */
    encode(): Promise<void>;
    /**
     * Stop the encoding process and cleanup the temporary data.
     * @returns {(ArrayBuffer|Uint8Array|Blob[]|undefined)}
     */
    stop(): (ArrayBuffer | Uint8Array | Blob[] | undefined);
    /**
     * Clean up the encoder
     */
    dispose(): void;
}
