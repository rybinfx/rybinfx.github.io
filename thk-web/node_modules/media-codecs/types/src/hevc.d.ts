/** @module hevc */
/**
 * List of profiles with their profile numbers (PP) and the compatibility (C).
 *
 * See Annexe 3 Profiles
 * @constant
 * @type {import("../types.js").VCProfileItem[]}
 */
export const HEVC_PROFILES: import("../types.js").VCProfileItem[];
/**
 * HEVC Profile Compatibility as a number in the 0..32 range
 * TODO: is that correct
 * @constant
 * @type {number[]}
 */
export const HEVC_PROFILE_COMPATIBILITY: number[];
/**
 * HEVC Levels
 * @constant
 * @type {string[]}
 * @see [hevc-levels]{@link https://en.wikipedia.org/wiki/High_Efficiency_Video_Coding#Tiers_and_levels}
 */
export const HEVC_LEVELS: string[];
/**
 * List of supported tier
 * @constant
 * @type {string[]}
 */
export const HEVC_TIER: string[];
/** @private  */
export function formatCodec(cccc: any, { PP }: {
    PP: any;
}, C: any, T: any, LL: any, CC: any): string;
/** @private  */
export function formatLevel(level: any): string;
/**
 * Return a list of all possible codec parameter string and their human readable names
 * @returns {import("../types.js").MediaCodecItem[]}
 */
export function getAllItems(): import("../types.js").MediaCodecItem[];
/**
 * Get a codec parameter string
 * @param {import("../types.js").HEVCCodecOptions} options
 * @returns {string}
 */
export function getCodec({ profile: profileName, compatibility, level, tier, constraint, }: import("../types.js").HEVCCodecOptions): string;
/**
 * Get a codec human readbable name
 * @param {string} codec a codec string (cccc.PP.C.TLL.CC eg. "hev1.1.3.H34.B0")
 * @returns {string}
 */
export function getCodecName(codec: string): string;
