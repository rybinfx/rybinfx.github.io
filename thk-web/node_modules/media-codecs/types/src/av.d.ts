/** @module av */
/**
 * List of codecs
 * @constant
 * @type {import("../types.js").CodecItem[]}
 */
export const AV_CODECS: import("../types.js").CodecItem[];
/**
 * List of AV profiles numbers
 * @constant
 * @type {import("../types.js").AVProfileItem[]}
 * @see [av1-spec]{@link https://aomediacodec.github.io/av1-spec/#profiles}
 */
export const AV_PROFILES: import("../types.js").AVProfileItem[];
/**
 * AV Levels
 * @constant
 * @type {string[]}
 * @see [av1-spec]{@link https://aomediacodec.github.io/av1-spec/#levels}
 */
export const AV_LEVELS: string[];
/**
 * List of supported tier
 * @constant
 * @type {string[]}
 */
export const AV_TIER: string[];
/**
 * List of supported bit depth
 * @constant
 * @type {number[]}
 */
export const AV_BIT_DEPTH: number[];
/** @private  */
export function formatCodec(cccc: any, P: any, LL: any, T: any, DD: any): string;
/** @private  */
export function formatLevel(level: any): string;
/**
 * Return a list of all possible codec parameter string and their human readable names
 * @returns {import("../types.js").MediaCodecItem[]}
 */
export function getAllItems(): import("../types.js").MediaCodecItem[];
/**
 * Get a codec parameter string
 * @param {import("../types.js").AVCodecOptions} options
 * @returns {string}
 */
export function getCodec({ name, profile: profileName, level, tier, bitDepth }: import("../types.js").AVCodecOptions): string;
/**
 * Get a codec human readbable name
 * @param {string} codec a codec string (av01.P.LLT.DD eg. "av01.P.LLT.DD")
 * @returns {string}
 */
export function getCodecName(codec: string): string;
